#!/usr/bin/python3

import numpy as np
import matplotlib.pyplot as plt
import sys
import configparser
import os
import os.path

data = [
        "a05100", "a10100", "a20100",
        "a05200", "a10200", "a20200",
        "b05100", "b10100", "b20100",
        "b05200", "b10200", "b20200",
        "c05100", "c10100", "c20100",
        "c05200", "c10200", "c20200",
        "c10400", "c20400", "c40400",
        "c15900", "c30900", "c60900",
        "c201600", "c401600", "c801600",
        "d05100", "d10100", "d20100",
        "d05200", "d10200", "d20200",
        "d10400", "d20400", "d40400",
        "d15900", "d30900", "d60900",
        "d201600", "d401600", "d801600",
        "e05100", "e10100", "e20100",
        "e05200", "e10200", "e20200",
        "e10400", "e20400", "e40400",
        "e15900", "e30900", "e60900",
        "e201600", "e401600", "e801600"
]

os.makedirs(os.path.join("out", "img"), exist_ok=True)
for i in data:
    print(i)

    f = open(os.path.join("data", i + ".bound"), 'r')
    lb = int(f.readline())

    plt.title(i)
    plt.xscale('log')
    plt.yscale('log')
    plt.xlabel('Time (s)')
    plt.ylabel('Cost')
    plt.grid(True)
    times = [0.0005, 0.004, 0.033, 0.25, 2, 15, 120, 900, 7200];
    costs_val = [0.001, 0.01, 0.1, 1];
    costs_lab = ["0.1%", "1%", "10%", "100%"];
    plt.xticks(times, times)
    plt.yticks(costs_val, costs_lab)
    plt.axhline(0.0001)

    files = [
            (os.path.join("out", "mthg_f_wij",               i + ".ini"), "mthg f wij", 0),
            (os.path.join("out", "repairlinrelax_clp",       i + ".ini"), "repairlinrelax_clp", 0),
            (os.path.join("out", "branchandcut_cplex_7200",  i + ".ini"), "branchandcut_cplex", 1),
    ]
    for inifile, label, z in files:
        if not os.path.exists(inifile):
            continue
        ini = configparser.ConfigParser()
        ini.optionxform=str
        ini.read(inifile)

        k = 1
        t = []
        w = []
        while "Solution" + str(k) in ini.sections():
            t.append(float(ini["Solution" + str(k)]["Time"]))
            w.append(float(ini["Solution" + str(k)]["Cost"]) / lb - 1 + 0.0001)
            k += 1
        t.append(float(ini["Solution"]["Time"]))
        w.append(float(ini["Solution"]["Cost"]) / lb - 1 + 0.0001)

        if z == 0:
            plt.plot(t, w, "-o", label=label)
        else:
            plt.plot(t, w, drawstyle='steps', label=label)

    plt.legend(loc='lower left')
    plt.savefig(os.path.join("out", "img", i + ".png"), format="png")
    plt.clf()

